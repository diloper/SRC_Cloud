# -*- coding: utf-8 -*-
"""OHLC_Time-test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qbvL7Hee9KR4IbYB--R8gLe-ZmwQJYXs
"""

# https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date=20221020&stockNo=2330

import requests
from requests import get
import time
import pandas as pd

from datetime import datetime
from dateutil.relativedelta import relativedelta
  
def get_OHLC_twse(stockid,date='20220104',sleep=5):
    time.sleep(sleep)
    my_headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36'
                 }
#     url='https://goodinfo.tw/StockInfo/ShowK_Chart.asp?STOCK_ID='+str(stockid) +'&CHT_CAT2=DATE'
    url='https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=json&date='+str(date) +'&stockNo='+str(stockid)
    s = requests.Session()
    
    Resp=s.post(url,headers =my_headers)
    Resp.encoding =  'utf-8' #for chinese encode
    txt=Resp.text
    x = txt.find("data")
    if x <0 :
      return None
    # print(txt)

    df = pd.read_json(txt, orient ='index')
    _row=df.loc["data"][0]
    # if len(_row)>0:
    # print(_row)
    change=["Volume","Open","High","Low","Close"]
    _df=pd.DataFrame(_row,columns=["Date","Volume","price","Open","High","Low","Close","A","B"])
    del _df['A']
    del _df['B']
    del _df['price']
    _df['Volume'].replace({',':''}, regex=True,inplace=True)
    _df['Date'].replace({'/':'-'}, regex=True,inplace=True)

    _start = datetime.strptime(str(date),'%Y%m%d')
    chinese_date=int(_start.year)-1911
    # print(chinese_date)
    _df['Date'].replace({str(chinese_date):str(_start.year)}, regex=True,inplace=True)
    for item in change:
      _df[[item]] = _df[[item]].apply(pd.to_numeric)

    _df['Volume']=_df['Volume'].round(decimals = -3)
    _df=_df.loc[:, ["Date","Open","High","Low","Close","Volume"]]
    
    return _df


def get_OHLC_twse_range(stockid=1459,start=20220901,end=20221001):


  _end=datetime.strptime(str(end),'%Y%m%d')
  _start=datetime.strptime(str(start),'%Y%m%d')

  _diff_month=diff_month(_end,_start)
  # if _diff_month <= 0:
  #   return None
  # print(_diff_month)
  # add_month(20221001)
  _df= pd.DataFrame()

  for _i in range(_diff_month+1):
    _result=add_month(start,add_month=_i)
    # print(a)
    _df=pd.concat([_df, get_OHLC_twse(stockid,_result,sleep=4)], ignore_index=True)
  # print(_end.isoformat('%Y-%m-%d'))
  # print(_start.isoformat())  
  cond0=_df['Date']<= _end.strftime('%Y-%m-%d')
  cond1=_df['Date']>= _start.strftime('%Y-%m-%d')
  # df.loc[start:end]

  A=_df.loc[cond1&cond0]
  # print(_df)
  return A

def diff_month(d1, d2):
    return (d1.year - d2.year) * 12 + d1.month - d2.month



def add_month(_mydate,add_month=1):
  A=datetime.strptime(str(_mydate),'%Y%m%d')
  new_date = A + relativedelta(months=add_month)

  date_time = new_date.strftime('%Y%m%d')

  return date_time

# adding months to a particular date


def main():
  a=1
  for i in range(10000):
    # try:
    ip = get('https://api.ipify.org').content.decode('utf8')
    print('My public IP address is: {}'.format(ip))
    A=get_OHLC_twse(stockid=2330,sleep=2)
    # A=get_OHLC_twse_goodinfo(stockid=2330,sleep=0)
    if A is not None:
      # print(A)
      time.sleep(a)
    else:
      break
    print('i='+str(i))
    # except Exception as e:
    #     print(e)
    #     a=a+10
if __name__ == '__main__':
    main()
